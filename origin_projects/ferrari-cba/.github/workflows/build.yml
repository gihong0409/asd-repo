name: build

on:
  push:
    branches:
      - '*'

env:
  PROJECT: "ferrari"
  LIVE_IP: "52.231.152.71"
  LIVE_PORT: 20022
  LIVE_USERNAME: "datau"
  TARGET: "datau@10.0.103.101"
  TARGET_PORT: 22
  DEV_IP: "115.68.216.61"
  DEV_PORT: 20022
  DEV_USERNANE: "datau"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: ${{ github.repository_owner == 'datauniverse-lab' || contains(github.event.head_commit.message, 'deploy') }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: ${{ github.repository}}
        path: './${{ github.event.repository.name }}'
        
    - uses: actions/checkout@v2
      with:
        name: ${{ env.PROJECT }}-common
        repository: ${{ github.repository_owner}}/${{ env.PROJECT }}-common
        ref: refs/heads/master
        path: './${{ env.PROJECT }}-common'
        token: ${{ secrets.PR_TOKEN }}
        submodules: true
        
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.23
    
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ github.event.repository.name }}
    
    - name: mod download
      run : cd ${{ github.event.repository.name }}; go get -v ./...
      
    - name: Test
      run: go test ${{ github.event.repository.name }}/test/main_test.go
      
    - name: Build
      run: mkdir dist; cd ${{ github.event.repository.name }}; cp Dockerfile ../; cp ./dist/* ../dist/ || true; CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -v -o  ../dist/${{ env.IMAGE_NAME }}  -ldflags "-X main.buildTime=$(date +'%Y/%m/%d_%H:%M:%S')_v"${{ github.run_number }} ./
     
    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: "pessimondatau"
        password: ${{ secrets.PR_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/datauniverse-lab/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
        
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/datauniverse-lab/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}:master
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Docker-Compose Read Live
      id: docker-compose-live
      uses: juliangruber/read-file-action@v1
      with:
        path: './${{ github.event.repository.name }}/build/docker-compose-live.yml'

    - name: Docker-Compose Read Dev
      id: docker-compose-dev
      uses: juliangruber/read-file-action@v1
      with:
        path: './${{ github.event.repository.name }}/build/docker-compose-dev.yml'

    - name: get-remove-prefix-name
      id : extract
      run : |
        cut_name=$(echo ${{ env.IMAGE_NAME }} | cut -d '-' -f 2)
        echo "::set-output name=ex-name::$cut_name"
  
    - name: Success Deploy Step Live
      if:  ${{ success() &&  github.repository_owner == 'datauniverse-lab' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.LIVE_IP }}
        username: ${{ env.LIVE_USERNAME }}
        key_path: "./${{ github.event.repository.name }}/build/ssh-key"
        port: ${{ env.LIVE_PORT }}
        script: |
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "mkdir /tmp/${{ github.event.repository.name }}||true"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo cat > /tmp/${{ github.event.repository.name }}/docker-compose-${{ github.event.repository.name }}.yml <<EOF
          ${{ steps.docker-compose-live.outputs.content }}
          EOF"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo docker login https://ghcr.io -u pessimon -p ${{ secrets.PR_TOKEN }}"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo docker pull ghcr.io/datauniverse-lab/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}:master||true"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo docker stop ${{ env.IMAGE_NAME }} ${{ steps.extract.outputs.ex-name }} ||true; sudo docker rm ${{ env.IMAGE_NAME }}||true;"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo docker-compose -f /tmp/${{ github.event.repository.name }}/docker-compose-${{ github.event.repository.name }}.yml up --detach"
          ssh -i ~/.ssh/data_new.pem ${{ env.TARGET }} -p ${{ env.TARGET_PORT }} "sudo rm -rf /tmp/${{ github.event.repository.name }}/docker-compose-${{ github.event.repository.name }}.yml"
          
    - name: Success Deploy Step Dev
      if: ${{ success() &&  github.repository_owner != 'datauniverse-lab' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.DEV_IP }}
        username: ${{ env.DEV_USERNANE }}
        key: ${{ secrets.IWINV_SSH_KEY }}
        port: ${{ env.DEV_PORT }}
        script: |
          mkdir /tmp/${{ github.event.repository.name }}||true
          cat > /tmp/${{ github.event.repository.name }}/docker-compose.yml <<EOF
          ${{ steps.docker-compose-dev.outputs.content }}
          EOF
          sudo docker login https://ghcr.io -u pessimon -p ${{ secrets.PR_TOKEN }}
          sudo docker pull ghcr.io/datauniverse-lab/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}||true
          sudo docker stop ${{ env.IMAGE_NAME }}||true;
          sudo docker rm ${{ env.IMAGE_NAME }}||true;
          sudo docker-compose -f /tmp/${{ github.event.repository.name }}/docker-compose.yml  up --detach
          sudo rm -rf /tmp/${{ github.event.repository.name }}/docker-compose.yml